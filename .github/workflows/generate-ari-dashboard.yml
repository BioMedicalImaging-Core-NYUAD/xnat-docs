name: Generate ARI Dashboard

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Optional description for this run'
        required: false
        default: 'Manual trigger'
        type: string

jobs:
  generate-dashboard:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python environment
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install pandas
        
    - name: Run ARI validation parser
      run: |
        echo "Starting ARI validation parser..."
        cd /home/mri/Documents/GitHub/ARIdashboard
        python3 parse_ari_validation.py
        echo "Parser completed successfully"
        
    - name: Verify output file exists
      run: |
        if [ -f "/home/mri/Documents/GitHub/ARIdashboard/xnat_ari_dashboard.csv" ]; then
          echo "Output file found"
          ls -la /home/mri/Documents/GitHub/ARIdashboard/xnat_ari_dashboard.csv
        else
          echo "Error: Output file not found"
          exit 1
        fi
        
    - name: Copy dashboard file to repository
      run: |
        cp /home/mri/Documents/GitHub/ARIdashboard/xnat_ari_dashboard.csv ./
        echo "Dashboard file copied to repository"
        
    - name: Generate dashboard content for documentation
      run: |
        python3 generate_dashboard.py
        echo "Dashboard content generated"
        
    - name: Copy CSV to documentation static folder
      run: |
        mkdir -p docs/source/_static
        cp xnat_ari_dashboard.csv docs/source/_static/
        echo "CSV file copied to documentation static folder"
        
    - name: Update ari-validator.rst with dashboard content
      run: |
        # Read the dashboard content
        if [ -f "dashboard_content.rst" ]; then
          # Create a temporary file with the updated content
          python3 -c "
import re

# Read the original file
with open('docs/source/processing_pipelines/ari-validator.rst', 'r') as f:
    content = f.read()

# Read the dashboard content
with open('dashboard_content.rst', 'r') as f:
    dashboard = f.read()

# Replace the section after 'Output and Reports' with our dashboard
pattern = r'(Output and Reports\s*------------------.*?)\[PLACEHOLDER.*?\]'
if re.search(pattern, content, re.DOTALL):
    updated_content = re.sub(pattern, r'\1' + dashboard, content, flags=re.DOTALL)
else:
    # If no placeholder found, add before 'Troubleshooting'
    pattern = r'(Troubleshooting\s*---------------)'
    updated_content = re.sub(pattern, dashboard + r'\n\n\1', content, flags=re.DOTALL)

# Write the updated content
with open('docs/source/processing_pipelines/ari-validator.rst', 'w') as f:
    f.write(updated_content)
"
          echo "Documentation updated with dashboard content"
        else
          echo "Error: dashboard_content.rst not found"
        fi
        
    - name: Create timestamp file
      run: |
        echo "Generated on: $(date)" > dashboard_timestamp.txt
        echo "Triggered by: ${{ github.actor }}" >> dashboard_timestamp.txt
        echo "Run ID: ${{ github.run_id }}" >> dashboard_timestamp.txt
        if [ -n "${{ inputs.description }}" ]; then
          echo "Description: ${{ inputs.description }}" >> dashboard_timestamp.txt
        fi
        
    - name: Check for changes
      id: check_changes
      run: |
        git add .
        if git diff --quiet --cached; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected in repository"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected in repository"
        fi
        
    - name: Configure git
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git commit -m "Update ARI dashboard data and documentation - $(date '+%Y-%m-%d %H:%M:%S')"
        git push
        
    - name: Upload dashboard as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ari-dashboard-${{ github.run_id }}
        path: |
          xnat_ari_dashboard.csv
          dashboard_timestamp.txt
          dashboard_content.rst
        retention-days: 30
        
    - name: Summary
      run: |
        echo "=== ARI Dashboard Generation Summary ===" 
        echo "Status: âœ… Success"
        echo "Generated: $(date)"
        echo "File location: ./xnat_ari_dashboard.csv"
        if [ -f "xnat_ari_dashboard.csv" ]; then
          echo "File size: $(du -h xnat_ari_dashboard.csv | cut -f1)"
          echo "Number of subjects: $(tail -n +2 xnat_ari_dashboard.csv | wc -l)"
        fi
        echo "Changes committed: ${{ steps.check_changes.outputs.changes }}"
        echo "Repository: https://github.com/BioMedicalImaging-Core-NYUAD/xnat-docs"